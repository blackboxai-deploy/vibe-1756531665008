"use client";

import { YandexMap } from "@/components/YandexMap";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { useState } from "react";

interface SearchResult {
  id: number;
  name: string;
  address: string;
  type: string;
  coordinates: [number, number];
  distance?: string;
}

export default function MapPage() {
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);
  const [selectedLocation, setSelectedLocation] = useState<[number, number] | null>(null);
  const [activeTab, setActiveTab] = useState("search");

  // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞
  const handleSearch = (query: string) => {
    if (!query.trim()) {
      setSearchResults([]);
      return;
    }

    // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    const mockResults: SearchResult[] = [
      {
        id: 1,
        name: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å",
        address: "—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 1",
        type: "–ü–ª–æ—â–∞–¥—å",
        coordinates: [55.754, 37.622] as [number, number],
        distance: "0.5 –∫–º"
      },
      {
        id: 2,
        name: "–ì–æ—Ä–æ–¥—Å–∫–∞—è –±–æ–ª—å–Ω–∏—Ü–∞ ‚Ññ1",
        address: "—É–ª. –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è, 15",
        type: "–ë–æ–ª—å–Ω–∏—Ü–∞",
        coordinates: [55.750, 37.618] as [number, number],
        distance: "1.2 –∫–º"
      },
      {
        id: 3,
        name: "–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä '–ï–≤—Ä–æ–ø–∞'",
        address: "–ø—Ä. –ú–∏—Ä–∞, 25",
        type: "–¢–¶",
        coordinates: [55.757, 37.620] as [number, number],
        distance: "0.8 –∫–º"
      },
      {
        id: 4,
        name: "–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–∞—Ä–∫",
        address: "—É–ª. –ü–∞—Ä–∫–æ–≤–∞—è, 5",
        type: "–ü–∞—Ä–∫",
        coordinates: [55.751, 37.625] as [number, number],
        distance: "1.5 –∫–º"
      }
    ].filter(result => 
      result.name.toLowerCase().includes(query.toLowerCase()) ||
      result.address.toLowerCase().includes(query.toLowerCase())
    );

    setSearchResults(mockResults);
  };

  const busRoutes = [
    { id: "12", name: "–ú–∞—Ä—à—Ä—É—Ç 12", description: "–¶–µ–Ω—Ç—Ä - –í–æ–∫–∑–∞–ª", color: "bg-blue-500" },
    { id: "34", name: "–ú–∞—Ä—à—Ä—É—Ç 34", description: "–ñ–∏–ª–æ–π —Ä–∞–π–æ–Ω - –¢–¶", color: "bg-green-500" },
    { id: "56", name: "–ú–∞—Ä—à—Ä—É—Ç 56", description: "–ë–æ–ª—å–Ω–∏—Ü–∞ - –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", color: "bg-red-500" },
    { id: "78", name: "–ú–∞—Ä—à—Ä—É—Ç 78", description: "–ü–∞—Ä–∫ - –ê—ç—Ä–æ–ø–æ—Ä—Ç", color: "bg-yellow-500" },
  ];

  const nearbyPlaces = [
    { id: 1, name: "–ö–∞—Ñ–µ '–°—Ç–∞—Ä—ã–π –≥–æ—Ä–æ–¥'", type: "–ö–∞—Ñ–µ", rating: 4.5, distance: "200 –º", icon: "‚òï" },
    { id: 2, name: "–ê–ø—Ç–µ–∫–∞ '–ó–¥–æ—Ä–æ–≤—å–µ'", type: "–ê–ø—Ç–µ–∫–∞", rating: 4.2, distance: "350 –º", icon: "üíä" },
    { id: 3, name: "–ë–∞–Ω–∫ '–°–±–µ—Ä–±–∞–Ω–∫'", type: "–ë–∞–Ω–∫", rating: 4.0, distance: "450 –º", icon: "üè¶" },
    { id: 4, name: "–°–ø–æ—Ä—Ç–∑–∞–ª '–ê—Ç–ª–∞—Å'", type: "–°–ø–æ—Ä—Ç", rating: 4.7, distance: "600 –º", icon: "üèãÔ∏è" },
  ];

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="bg-primary text-primary-foreground p-4 pb-2">
        <div className="flex items-center gap-3 mb-4">
          <h1 className="text-2xl font-bold flex items-center gap-2">
            üó∫Ô∏è –ö–∞—Ä—Ç–∞ –≥–æ—Ä–æ–¥–∞
          </h1>
        </div>
        
        {/* Search Bar */}
        <div className="relative">
          <Input
            placeholder="–ü–æ–∏—Å–∫ –º–µ—Å—Ç, –∞–¥—Ä–µ—Å–æ–≤..."
            value={searchQuery}
            onChange={(e) => {
              setSearchQuery(e.target.value);
              handleSearch(e.target.value);
            }}
            className="bg-background text-foreground border-0 h-12 text-base"
          />
        </div>
      </div>

      <div className="flex flex-col lg:flex-row h-[calc(100vh-120px)]">
        {/* Map Container */}
        <div className="flex-1 relative">
          <YandexMap 
            className="w-full h-full"
            center={selectedLocation || [55.753994, 37.622093]}
            zoom={selectedLocation ? 15 : 12}
            onLocationFound={(coords) => setSelectedLocation(coords)}
          />
        </div>

        {/* Side Panel */}
        <div className="lg:w-96 bg-background border-t lg:border-t-0 lg:border-l border-border">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full">
            <TabsList className="grid w-full grid-cols-3 m-2 mb-0">
              <TabsTrigger value="search">–ü–æ–∏—Å–∫</TabsTrigger>
              <TabsTrigger value="transport">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</TabsTrigger>
              <TabsTrigger value="nearby">–†—è–¥–æ–º</TabsTrigger>
            </TabsList>

            {/* Search Results */}
            <TabsContent value="search" className="p-2 space-y-2 h-full overflow-y-auto">
              {searchQuery && (
                <div className="text-sm text-muted-foreground mb-2">
                  –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {searchResults.length}
                </div>
              )}
              
              {searchResults.map((result) => (
                <Card key={result.id} className="cursor-pointer hover:bg-accent transition-colors"
                      onClick={() => setSelectedLocation(result.coordinates)}>
                  <CardContent className="p-3">
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <h3 className="font-medium text-sm">{result.name}</h3>
                        <p className="text-xs text-muted-foreground mt-1">{result.address}</p>
                        <div className="flex items-center gap-2 mt-2">
                          <Badge variant="secondary" className="text-xs">{result.type}</Badge>
                          {result.distance && (
                            <span className="text-xs text-muted-foreground">{result.distance}</span>
                          )}
                        </div>
                      </div>
                      <Button variant="outline" size="sm" className="ml-2 text-xs px-2 py-1">
                        –ü–æ–∫–∞–∑–∞—Ç—å
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
              
              {!searchQuery && (
                <div className="flex flex-col items-center justify-center h-32 text-center">
                  <span className="text-4xl mb-2">üîç</span>
                  <p className="text-sm text-muted-foreground">
                    –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
                  </p>
                </div>
              )}
            </TabsContent>

            {/* Transport Routes */}
            <TabsContent value="transport" className="p-2 space-y-2 h-full overflow-y-auto">
              <div className="mb-3">
                <h3 className="font-semibold text-sm mb-2">–ê–≤—Ç–æ–±—É—Å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã</h3>
              </div>
              
              {busRoutes.map((route) => (
                <Card key={route.id} className="cursor-pointer hover:bg-accent transition-colors">
                  <CardContent className="p-3">
                    <div className="flex items-center gap-3">
                      <div className={`w-8 h-8 rounded-full ${route.color} flex items-center justify-center text-white text-sm font-bold`}>
                        {route.id}
                      </div>
                      <div className="flex-1">
                        <h4 className="font-medium text-sm">{route.name}</h4>
                        <p className="text-xs text-muted-foreground">{route.description}</p>
                      </div>
                      <Button variant="outline" size="sm" className="text-xs px-2 py-1">
                        –ú–∞—Ä—à—Ä—É—Ç
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
              
              <Card className="bg-accent/30">
                <CardContent className="p-3 text-center">
                  <div className="text-2xl mb-2">üöå</div>
                  <p className="text-sm font-medium">–û–Ω–ª–∞–π–Ω-–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</p>
                  <p className="text-xs text-muted-foreground mt-1">
                    –°–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ–º –∞–≤—Ç–æ–±—É—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                  </p>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Nearby Places */}
            <TabsContent value="nearby" className="p-2 space-y-2 h-full overflow-y-auto">
              <div className="mb-3">
                <h3 className="font-semibold text-sm mb-2">–†—è–¥–æ–º —Å –≤–∞–º–∏</h3>
              </div>
              
              {nearbyPlaces.map((place) => (
                <Card key={place.id} className="cursor-pointer hover:bg-accent transition-colors">
                  <CardContent className="p-3">
                    <div className="flex items-start gap-3">
                      <span className="text-2xl">{place.icon}</span>
                      <div className="flex-1">
                        <h4 className="font-medium text-sm">{place.name}</h4>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge variant="outline" className="text-xs">{place.type}</Badge>
                          <span className="text-xs text-muted-foreground">{place.distance}</span>
                        </div>
                        <div className="flex items-center gap-1 mt-1">
                          <span className="text-yellow-500 text-sm">‚òÖ</span>
                          <span className="text-xs text-muted-foreground">{place.rating}</span>
                        </div>
                      </div>
                      <Button variant="outline" size="sm" className="text-xs px-2 py-1">
                        –ü–µ—Ä–µ–π—Ç–∏
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
}