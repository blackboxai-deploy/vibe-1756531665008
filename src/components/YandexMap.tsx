"use client";

import { useEffect, useRef, useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";

declare global {
  interface Window {
    ymaps3: any;
  }
}

interface MapProps {
  className?: string;
  center?: [number, number];
  zoom?: number;
  onLocationFound?: (coordinates: [number, number]) => void;
}

export function YandexMap({ 
  className = "w-full h-full", 
  center = [55.753994, 37.622093], // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  zoom = 10,
  onLocationFound 
}: MapProps) {
  const mapContainer = useRef<HTMLDivElement>(null);
  const [map, setMap] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [userLocation, setUserLocation] = useState<[number, number] | null>(null);
  const [error, setError] = useState<string | null>(null);

  // –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
  const busStops = [
    { id: 1, name: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å", coordinates: [55.754, 37.622], routes: ["12", "34", "56"] },
    { id: 2, name: "–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–∞—Ä–∫", coordinates: [55.751, 37.625], routes: ["12", "78"] },
    { id: 3, name: "–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä", coordinates: [55.757, 37.620], routes: ["34", "56", "90"] },
    { id: 4, name: "–ë–æ–ª—å–Ω–∏—Ü–∞", coordinates: [55.750, 37.618], routes: ["78", "90"] },
    { id: 5, name: "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", coordinates: [55.756, 37.628], routes: ["12", "90"] },
  ];

  const pointsOfInterest = [
    { id: 1, name: "–ì–æ—Ä–æ–¥—Å–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", coordinates: [55.753, 37.624], type: "library", icon: "üìö" },
    { id: 2, name: "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å", coordinates: [55.752, 37.619], type: "sports", icon: "üèä" },
    { id: 3, name: "–ú—É–∑–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –≥–æ—Ä–æ–¥–∞", coordinates: [55.755, 37.623], type: "museum", icon: "üèõÔ∏è" },
    { id: 4, name: "–†–µ—Å—Ç–æ—Ä–∞–Ω '–£ –¥–æ–º–∞'", coordinates: [55.754, 37.621], type: "restaurant", icon: "üçΩÔ∏è" },
    { id: 5, name: "–ê–ø—Ç–µ–∫–∞ 24/7", coordinates: [55.751, 37.626], type: "pharmacy", icon: "üíä" },
  ];

  useEffect(() => {
    const initMap = async () => {
      try {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Yandex Maps API
        if (!window.ymaps3) {
          // –ï—Å–ª–∏ API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
          setError("–ö–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∫–∞–∑–∞–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.");
          setIsLoading(false);
          return;
        }

        await window.ymaps3.ready;
        
        if (mapContainer.current && !map) {
          const mapInstance = new window.ymaps3.YMap(mapContainer.current, {
            location: {
              center: center,
              zoom: zoom
            }
          });

          // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–æ–π –∫–∞—Ä—Ç—ã
          mapInstance.addChild(new window.ymaps3.YMapDefaultSchemeLayer());
          
          // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          mapInstance.addChild(new window.ymaps3.YMapDefaultFeaturesLayer());

          // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–æ–∫
          busStops.forEach(stop => {
            const marker = new window.ymaps3.YMapMarker(
              { 
                coordinates: stop.coordinates,
                draggable: false
              },
              document.createElement('div')
            );
            
            marker.element.innerHTML = `
              <div class="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold shadow-lg cursor-pointer" title="${stop.name}">
                üöå
              </div>
            `;
            
            mapInstance.addChild(marker);
          });

          // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
          pointsOfInterest.forEach(poi => {
            const marker = new window.ymaps3.YMapMarker(
              { 
                coordinates: poi.coordinates,
                draggable: false
              },
              document.createElement('div')
            );
            
            marker.element.innerHTML = `
              <div class="bg-green-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm shadow-lg cursor-pointer" title="${poi.name}">
                ${poi.icon}
              </div>
            `;
            
            mapInstance.addChild(marker);
          });

          setMap(mapInstance);
        }
        
        setIsLoading(false);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', err);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É");
        setIsLoading(false);
      }
    };

    initMap();
  }, [center, zoom, map]);

  const getCurrentLocation = () => {
    if (!navigator.geolocation) {
      setError("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º");
      return;
    }

    navigator.geolocation.getCurrentPosition(
      (position) => {
        const coords: [number, number] = [
          position.coords.latitude,
          position.coords.longitude
        ];
        setUserLocation(coords);
        if (onLocationFound) {
          onLocationFound(coords);
        }
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (map) {
          map.setLocation({
            center: coords,
            zoom: 15
          });
        }
      },
      (error) => {
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
        console.error('Geolocation error:', error);
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 300000
      }
    );
  };

  if (error && !map) {
    return (
      <div className={`${className} relative bg-gray-100 dark:bg-gray-800 rounded-lg`}>
        <div className="absolute inset-0 flex flex-col items-center justify-center p-4">
          <div className="text-6xl mb-4">üó∫Ô∏è</div>
          <p className="text-center text-muted-foreground mb-4">{error}</p>
          <div className="grid grid-cols-2 gap-4 w-full max-w-sm">
            {busStops.slice(0, 4).map(stop => (
              <Card key={stop.id} className="p-3">
                <div className="flex items-center gap-2">
                  <span className="text-xl">üöå</span>
                  <div>
                    <p className="text-sm font-medium">{stop.name}</p>
                    <p className="text-xs text-muted-foreground">
                      –ú–∞—Ä—à—Ä—É—Ç—ã: {stop.routes.join(', ')}
                    </p>
                  </div>
                </div>
              </Card>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`${className} relative`}>
      {isLoading && (
        <div className="absolute inset-0 flex items-center justify-center bg-background/80 z-10">
          <div className="flex flex-col items-center gap-2">
            <div className="text-4xl">üó∫Ô∏è</div>
            <p className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</p>
          </div>
        </div>
      )}
      
      <div ref={mapContainer} className="w-full h-full rounded-lg" />
      
      {/* –ö–Ω–æ–ø–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è */}
      <Button
        onClick={getCurrentLocation}
        className="absolute top-4 right-4 z-10 w-12 h-12 p-0"
        variant="secondary"
        size="icon"
        title="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
      >
        üìç
      </Button>

      {/* –õ–µ–≥–µ–Ω–¥–∞ */}
      <Card className="absolute bottom-4 left-4 z-10 max-w-xs">
        <CardContent className="p-3">
          <div className="space-y-2 text-xs">
            <div className="flex items-center gap-2">
              <span className="text-blue-500">üöå</span>
              <span>–ê–≤—Ç–æ–±—É—Å–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏</span>
            </div>
            <div className="flex items-center gap-2">
              <span className="text-green-500">üìö</span>
              <span>–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</span>
            </div>
            {userLocation && (
              <div className="flex items-center gap-2">
                <span>üìç</span>
                <span>–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}